<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wireless Network Security Flashcards</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            color: #333;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            color: white;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            font-size: 1.2em;
            opacity: 0.9;
        }

        .flashcard-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 30px;
            max-width: 1200px;
            width: 100%;
        }

        .flashcard {
            width: 100%;
            height: 250px;
            perspective: 1000px;
            cursor: pointer;
            transition: transform 0.3s ease;
        }

        .flashcard:hover {
            transform: scale(1.05);
        }

        .flashcard:focus {
            outline: 3px solid #ffeb3b;
            outline-offset: 5px;
        }

        .flashcard-inner {
            position: relative;
            width: 100%;
            height: 100%;
            text-align: center;
            transition: transform 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            transform-style: preserve-3d;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }

        .flashcard.flipped .flashcard-inner {
            transform: rotateY(180deg);
        }

        .flashcard-front, .flashcard-back {
            position: absolute;
            width: 100%;
            height: 100%;
            -webkit-backface-visibility: hidden;
            backface-visibility: hidden;
            border-radius: 15px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 20px;
            background: linear-gradient(145deg, #ffffff, #f0f0f0);
            border: 2px solid #e0e0e0;
        }

        .flashcard-back {
            transform: rotateY(180deg);
            background: linear-gradient(145deg, #f8f9fa, #e9ecef);
        }

        .flashcard-front h3 {
            font-size: 1.5em;
            color: #2c3e50;
            margin-bottom: 15px;
            text-align: center;
            line-height: 1.3;
        }

        .flashcard-front .topic-icon {
            font-size: 2em;
            margin-bottom: 10px;
            color: #3498db;
        }

        .flashcard-back p {
            font-size: 1em;
            line-height: 1.6;
            color: #34495e;
            text-align: left;
            max-width: 100%;
        }

        .flashcard-back ul {
            text-align: left;
            padding-left: 20px;
            line-height: 1.6;
        }

        .flip-indicator {
            position: absolute;
            bottom: 10px;
            right: 15px;
            background: #3498db;
            color: white;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8em;
            font-weight: bold;
        }

        .controls {
            margin-top: 30px;
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            justify-content: center;
        }

        .btn {
            background: linear-gradient(145deg, #3498db, #2980b9);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1em;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(52, 152, 219, 0.4);
        }

        .btn:focus {
            outline: 3px solid #ffeb3b;
            outline-offset: 2px;
        }

        .btn:active {
            transform: translateY(0);
        }

        .progress-bar {
            width: 100%;
            max-width: 600px;
            height: 8px;
            background: rgba(255,255,255,0.3);
            border-radius: 4px;
            margin: 20px 0;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #2ecc71, #27ae60);
            width: 0%;
            transition: width 0.5s ease;
            border-radius: 4px;
        }

        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }

        @media (max-width: 768px) {
            .flashcard-container {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .header h1 {
                font-size: 2em;
            }
            
            .flashcard {
                height: 220px;
            }
        }

        @media (prefers-reduced-motion: reduce) {
            .flashcard-inner {
                transition: none;
            }
            
            .flashcard:hover {
                transform: none;
            }
        }
    </style>
</head>
<body>
    <header class="header">
        <h1>Wireless Network Security</h1>
        <p>Interactive 3D Flashcards - Click to flip and learn!</p>
    </header>

    <div class="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
        <div class="progress-fill" id="progressFill"></div>
    </div>

    <main class="flashcard-container" id="flashcardContainer">
        <!-- Flashcards will be generated by JavaScript -->
    </main>

    <div class="controls">
        <button class="btn" onclick="flipAllCards()" aria-label="Flip all flashcards">Flip All Cards</button>
        <button class="btn" onclick="resetAllCards()" aria-label="Reset all flashcards to front side">Reset All</button>
        <button class="btn" onclick="shuffleCards()" aria-label="Shuffle flashcard order">Shuffle Cards</button>
    </div>

    <script>
        const flashcardData = [
            {
                topic: "WEP (Wired Equivalent Privacy)",
                icon: "üîí",
                content: "WEP is a deprecated security protocol that uses RC4 encryption with 40-bit or 104-bit keys. It has significant vulnerabilities including weak key generation, IV reuse, and can be cracked in minutes. Replaced by WPA/WPA2."
            },
            {
                topic: "WPA/WPA2 Security",
                icon: "üõ°Ô∏è",
                content: "WPA uses TKIP encryption, while WPA2 uses AES-CCMP. Both implement 802.11i security standards. WPA2-PSK uses pre-shared keys, while WPA2-Enterprise uses 802.1X authentication with RADIUS servers for enterprise environments."
            },
            {
                topic: "WPA3 Enhancements",
                icon: "üîê",
                content: "WPA3 introduces SAE (Simultaneous Authentication of Equals) replacing PSK, providing forward secrecy. It offers 192-bit encryption for enterprise, individualized data encryption, and protection against offline dictionary attacks."
            },
            {
                topic: "802.11 Frame Types",
                icon: "üì°",
                content: "Three main frame types: Management frames (beacon, probe, authentication), Control frames (RTS, CTS, ACK), and Data frames (actual user data). Each has specific security implications and can be targets for attacks."
            },
            {
                topic: "Wireless Attack Vectors",
                icon: "‚ö†Ô∏è",
                content: "Common attacks include: Evil Twin (rogue AP), Deauthentication attacks, WPS PIN attacks, Packet injection, Man-in-the-middle attacks, and Wardriving. Each exploits different wireless protocol weaknesses."
            },
            {
                topic: "802.1X Authentication",
                icon: "üîë",
                content: "Port-based network access control using EAP (Extensible Authentication Protocol). Involves supplicant (client), authenticator (AP), and authentication server (RADIUS). Provides centralized authentication and key management."
            },
            {
                topic: "RADIUS Protocol",
                icon: "üåê",
                content: "Remote Authentication Dial-In User Service. Centralizes authentication, authorization, and accounting (AAA). Uses UDP ports 1812/1813, shared secrets, and supports various EAP methods for wireless authentication."
            },
            {
                topic: "Wireless Intrusion Detection",
                icon: "üëÅÔ∏è",
                content: "WIDS monitors wireless networks for unauthorized access points, clients, and attacks. Uses signature-based and anomaly-based detection. Can identify rogue APs, evil twins, and unusual traffic patterns."
            },
            {
                topic: "RF Security Fundamentals",
                icon: "üì∂",
                content: "Radio frequency propagation affects security. Considerations include: signal attenuation, interference, channel planning, power management, and physical security. Proper RF design reduces eavesdropping risks."
            },
            {
                topic: "Wireless Encryption Protocols",
                icon: "üîê",
                content: "Evolution: WEP (RC4, broken) ‚Üí WPA (TKIP, deprecated) ‚Üí WPA2 (AES-CCMP, current standard) ‚Üí WPA3 (SAE, latest). Each addresses previous vulnerabilities while maintaining backward compatibility."
            },
            {
                topic: "Enterprise Security Architecture",
                icon: "üè¢",
                content: "Includes: WLAN controllers, authentication servers, certificate authorities, network access control, and security monitoring. Implements defense-in-depth with multiple security layers and centralized management."
            },
            {
                topic: "Wireless Penetration Testing",
                icon: "üîç",
                content: "Systematic testing of wireless security using tools like Aircrack-ng, Kismet, and Wireshark. Includes reconnaissance, vulnerability assessment, exploitation, and reporting. Helps identify security gaps before attackers do."
            }
        ];

        let flippedCards = new Set();
        let currentOrder = [...Array(flashcardData.length).keys()];

        function createFlashcard(data, index) {
            return `
                <div class="flashcard" 
                     tabindex="0" 
                     onclick="flipCard(${index})" 
                     onkeydown="handleKeyPress(event, ${index})"
                     role="button"
                     aria-label="Flashcard: ${data.topic}. Click to flip and reveal details."
                     aria-pressed="false"
                     id="card-${index}">
                    <div class="flashcard-inner">
                        <div class="flashcard-front">
                            <div class="topic-icon" aria-hidden="true">${data.icon}</div>
                            <h3>${data.topic}</h3>
                            <div class="flip-indicator" aria-hidden="true">?</div>
                        </div>
                        <div class="flashcard-back">
                            <p>${data.content}</p>
                            <div class="flip-indicator" aria-hidden="true">‚Üê</div>
                        </div>
                    </div>
                    <div class="sr-only" id="card-status-${index}">Front side showing</div>
                </div>
            `;
        }

        function renderFlashcards() {
            const container = document.getElementById('flashcardContainer');
            container.innerHTML = currentOrder.map(index => 
                createFlashcard(flashcardData[index], index)
            ).join('');
            updateProgress();
        }

        function flipCard(index) {
            const card = document.getElementById(`card-${index}`);
            const statusEl = document.getElementById(`card-status-${index}`);
            
            if (flippedCards.has(index)) {
                card.classList.remove('flipped');
                card.setAttribute('aria-pressed', 'false');
                statusEl.textContent = 'Front side showing';
                flippedCards.delete(index);
            } else {
                card.classList.add('flipped');
                card.setAttribute('aria-pressed', 'true');
                statusEl.textContent = 'Back side showing - details revealed';
                flippedCards.add(index);
            }
            
            updateProgress();
        }

        function handleKeyPress(event, index) {
            if (event.key === 'Enter' || event.key === ' ') {
                event.preventDefault();
                flipCard(index);
            }
        }

        function flipAllCards() {
            currentOrder.forEach(index => {
                const card = document.getElementById(`card-${index}`);
                const statusEl = document.getElementById(`card-status-${index}`);
                
                if (!flippedCards.has(index)) {
                    card.classList.add('flipped');
                    card.setAttribute('aria-pressed', 'true');
                    statusEl.textContent = 'Back side showing - details revealed';
                    flippedCards.add(index);
                }
            });
            updateProgress();
        }

        function resetAllCards() {
            currentOrder.forEach(index => {
                const card = document.getElementById(`card-${index}`);
                const statusEl = document.getElementById(`card-status-${index}`);
                
                card.classList.remove('flipped');
                card.setAttribute('aria-pressed', 'false');
                statusEl.textContent = 'Front side showing';
            });
            flippedCards.clear();
            updateProgress();
        }

        function shuffleCards() {
            // Fisher-Yates shuffle algorithm
            for (let i = currentOrder.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [currentOrder[i], currentOrder[j]] = [currentOrder[j], currentOrder[i]];
            }
            
            flippedCards.clear();
            renderFlashcards();
        }

        function updateProgress() {
            const progressPercentage = (flippedCards.size / flashcardData.length) * 100;
            const progressFill = document.getElementById('progressFill');
            const progressBar = progressFill.parentElement;
            
            progressFill.style.width = `${progressPercentage}%`;
            progressBar.setAttribute('aria-valuenow', Math.round(progressPercentage));
            
            // Announce progress to screen readers
            const announcement = document.createElement('div');
            announcement.className = 'sr-only';
            announcement.setAttribute('aria-live', 'polite');
            announcement.textContent = `Progress: ${flippedCards.size} of ${flashcardData.length} cards flipped`;
            document.body.appendChild(announcement);
            
            setTimeout(() => {
                document.body.removeChild(announcement);
            }, 1000);
        }

        // Initialize the flashcards
        document.addEventListener('DOMContentLoaded', function() {
            renderFlashcards();
            
            // Add keyboard navigation for the entire page
            document.addEventListener('keydown', function(event) {
                if (event.key === 'F' && event.ctrlKey) {
                    event.preventDefault();
                    flipAllCards();
                } else if (event.key === 'R' && event.ctrlKey) {
                    event.preventDefault();
                    resetAllCards();
                } else if (event.key === 'S' && event.ctrlKey) {
                    event.preventDefault();
                    shuffleCards();
                }
            });
        });

        // Announce keyboard shortcuts to screen readers
        function announceKeyboardShortcuts() {
            const announcement = document.createElement('div');
            announcement.className = 'sr-only';
            announcement.setAttribute('aria-live', 'polite');
            announcement.textContent = 'Keyboard shortcuts: Ctrl+F to flip all cards, Ctrl+R to reset all cards, Ctrl+S to shuffle cards. Use Tab to navigate between cards and Enter or Space to flip individual cards.';
            document.body.appendChild(announcement);
            
            setTimeout(() => {
                document.body.removeChild(announcement);
            }, 5000);
        }

        // Announce shortcuts after page loads
        window.addEventListener('load', function() {
            setTimeout(announceKeyboardShortcuts, 2000);
        });
    </script>
</body>
</html>
